/*! @brief http 服务器对象

 http 服务器对象是将 TcpServer 和 HttpHandler 组合封装的对象，方便快速搭建服务器，创建方法：
 @code
 var http = require("http");
 var svr = new http.Server(function(req){
     ...
 });
 @endcode
 */
class HttpServer: object
{
	/*! @brief HttpServer 构造函数，在所有本机地址侦听
	  @param port 指定 http 服务器侦听端口
	  @param hdlr http 消息处理器
	 */
	HttpServer(Integer port, Handler hdlr);

	/*! @brief HttpServer 构造函数，在所有本机地址侦听
	  @param port 指定 http 服务器侦听端口
	  @param hdlr http 消息处理函数
	 */
	HttpServer(Integer port, Function hdlr);

	/*! @brief HttpServer 构造函数，在所有本机地址侦听，并绑定静态文件目录
	  @param port 指定 http 服务器侦听端口
	  @param root 文件根路径
	 */
	HttpServer(Integer port, String root);

	/*! @brief HttpServer 构造函数
	  @param addr 指定 http 服务器侦听地址，为 "" 则在本机所有地址侦听
	  @param port 指定 http 服务器侦听端口
	  @param hdlr http 消息处理器
	 */
	HttpServer(String addr, Integer port, Handler hdlr);

	/*! @brief HttpServer 构造函数
	  @param addr 指定 http 服务器侦听地址，为 "" 则在本机所有地址侦听
	  @param port 指定 http 服务器侦听端口
	  @param hdlr http 消息处理函数
	 */
	HttpServer(String addr, Integer port, Function hdlr);

	/*! @brief HttpServer 构造函数，在所有本机地址侦听，并绑定静态文件目录
	  @param addr 指定 http 服务器侦听地址，为 "" 则在本机所有地址侦听
	  @param port 指定 http 服务器侦听端口
	  @param root 文件根路径
	 */
	HttpServer(String addr, Integer port, String root);

	/*! @brief 运行 http 服务器并开始接收和分发连接，此函数不会返回 */
	run() async;

	/*! @brief 异步运行 http 服务器并开始接收和分发连接，调用后立即返回，服务器在后台运行 */
	asyncRun();

	/*! @brief http 服务器当前侦听的 Socket 对象  */
	readonly Socket socket;
	
	/*! @brief 查询和设置是否允许跨域请求，缺省为 false */
	Boolean crossDomain;

	/*! @brief 查询和设置是否允强制使用 gzip 压缩输出，缺省为 false */
	Boolean forceGZIP;

	/*! @brief 查询和设置最大请求头个数，缺省为 128 */
	Integer maxHeadersCount;

	/*! @brief 查询和设置最大上传尺寸，以 MB 为单位，缺省为 64 */
	Integer maxUploadSize;

	/*! @brief 查询 http 协议转换处理器的工作状态
	 
	  返回的结果为一个 Stats 对象，结构如下：
	  @code
	  {
	      total : 1000,    // 总计处理的请求
	      pendding : 100,  // 当前正在处理的请求
	      request : 10,    // 新建的请求
	      response : 10,   // 发送的响应
	      error : 100,     // 发生的错误（不计入 404）
	      error_400 : 10,  // 发生的请求错误
	      error_404 : 12,  // 文件未找到的数量
	      error_500 : 2    // 内部处理错误
	  }
	  @endcode
	 */
	readonly Stats httpStats;

	/*! @brief 查询当前服务器 tcp 运行状态
	 
	  返回的结果为一个 Stats 对象，结构如下：
	  @code
	  {
	      total : 1000,      // 总计处理的连接
	      connections : 100, // 当前正在处理的连接
	      accept : 10,       // 上次查询后新建的连接
	      close : 10         // 上次查询后关闭的连接
	  }
	  @endcode
	 */
	readonly Stats tcpStats;
};
