
/*! @brief 编码与解码模块，用于处理不同的数据编码格式与二进制之间的转换
 * 引用方式：
 * @code
 * var encoding = require('encoding');
 * @endcode
 */
class encoding : module
{
	/*! @brief 以 base32 方式编码数据
	 * @param data 要编码的数据
	 * @return 返回编码的字符串
	 */
	static String base32Encode(Buffer data);

	/*! @brief 以 base32 方式解码字符串为二进制数据
	 * @param data 要解码的字符串
	 * @return 返回解码的字符串
	 */
	static Buffer base32Decode(String data);

	/*! @brief 以 base64 方式编码数据
	 * @param data 要编码的数据
	 * @return 返回编码的字符串
	 */
	static String base64Encode(Buffer data);

	/*! @brief 以 base64 方式解码字符串为二进制数据
	 * @param data 要解码的字符串
	 * @return 返回解码的字符串
	 */
	static Buffer base64Decode(String data);

	/*! @brief 以 hex 方式编码数据
	 * @param data 要编码的数据
	 * @return 返回编码的字符串
	 */
	static String hexEncode(Buffer data);

	/*! @brief 以 hex 方式解码字符串为二进制数据
	 * @param data 要解码的字符串
	 * @return 返回解码的字符串
	 */
	static Buffer hexDecode(String data);

	/*! @brief url 字符串安全编码
	 * @param url 要编码的 url
	 * @return 返回编码的字符串
	 */
	static String encodeURI(String url);

	/*! @brief url 部件字符串安全编码
	 * @param url 要编码的 url
	 * @return 返回编码的字符串
	 */
	static String encodeURIComponent(String url);

	/*! @brief url 安全字符串解码
	 * @param url 要解码的 url
	 * @return 返回解码的字符串
	 */
	static String decodeURI(String url);
};

