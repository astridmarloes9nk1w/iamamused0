/*! @brief 文件操作对象，用于二进制文件读写
 * 
 * 文件操作对象用于对二进制文件进行操作，可使用 fs 模块打开和创建文件：
 * @code
 * var f = fs.open('test.txt');
 * @endcode
 */
class File: Stream
{
//	const Integer SEEK_SET = 0;
//	const Integer SEEK_CUR = 1;
//	const Integer SEEK_END = 2;

	/*! @brief 文件对象构造函数  */
	File();

	/*! @brief 打开文件，用于读取，写入，或者同时读写
	 * @param fname 指定文件名
	 * @param mode 指定文件打开方式，缺省为 "r"，只读方式。支持的方式如下：
	 * - 'r' 只读方式，文件不存在则抛出错误。
	 * - 'r+' 读写方式，文件不存在则抛出错误。
	 * - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。
	 * - 'w+' 读写方式，文件不存在则自动创建。
	 * - 'a' 只写添加方式，文件不存在则自动创建。
	 * - 'a+' 读写添加方式，文件不存在则自动创建。
	 */
	open(String fname, String mode = "r") async;

	/*! @brief 异步打开文件，用于读取，写入，或者同时读写
	 * @param fname 指定文件名
	 * @param mode 指定文件打开方式，缺省为 "r"，只读方式。支持的方式如下：
	 * - 'r' 只读方式，文件不存在则抛出错误。
	 * - 'r+' 读写方式，文件不存在则抛出错误。
	 * - 'w' 只写方式，文件不存在则自动创建，存在则将被清空。
	 * - 'w+' 读写方式，文件不存在则自动创建。
	 * - 'a' 只写添加方式，文件不存在则自动创建。
	 * - 'a+' 读写添加方式，文件不存在则自动创建。
	 */
	asyncOpen(String fname, String mode = "r");

	/*! @brief 注册 "open" 事件，等同于 on("open", func);
	 * @param func 事件处理函数
	 *
	 * "open" 事件定义如下：
	 * @code
	 * function on_open()
	 * {}
	 * @endcode
	 */
	onopen(Function func);

	/*! @brief 查询当前文件名 */
	readonly String name;
	
	/*! @brief 移动文件当前操作位置
	 *  @param offset 指定新的位置
	 *  @param whence 指定位置基准，允许的值为：SEEK_SET, SEEK_CUR, SEEK_END
	 */
	seek(Long offset, Integer whence = io.SEEK_SET);

	/*! @brief 查询文件当前位置 */
	Long tell();

	/*! @brief 移动当前位置到文件开头 */
	rewind();
	
	/*! @brief 修改文件尺寸，如果新尺寸小于原尺寸，则文件被截断
	 *  @param bytes 新的文件尺寸
	 */
	truncate(Long bytes) async;

	/*! @brief 异步修改文件尺寸，如果新尺寸小于原尺寸，则文件被截断
	 *  @param bytes 新的文件尺寸
	 */
	asyncTruncate(Long bytes);

	/*! @brief 注册 "truncate" 事件，等同于 on("truncate", func);
	 * @param func 事件处理函数
	 *
	 * "truncate" 事件定义如下：
	 * @code
	 * function on_truncate()
	 * {}
	 * @endcode
	 */
	ontruncate(Function func);

	/*! @brief 查询文件尺寸 */
	Long size();

	/*! @brief 查询文件是否到结尾 */
	Boolean eof();

	/*! @brief 将文件缓冲区内容写入物理设备 */
	flush() async;

	/*! @brief 将文件缓冲区内容异步写入物理设备，完成后触发事件 "flush" */
	asyncFlush();

	/*! @brief 注册 "flush" 事件，等同于 on("flush", func);
	 * @param func 事件处理函数
	 *
	 * "flush" 事件定义如下：
	 * @code
	 * function on_flush()
	 * {}
	 * @endcode
	 */
	onflush(Function func);

	/*! @brief 关闭当前文件 */
	close() async;

	/*! @brief 异步关闭当前文件，完成后触发事件 "close" */
	asyncClose();

	/*! @brief 注册 "close" 事件，等同于 on("close", func);
	 * @param func 事件处理函数
	 *
	 * "close" 事件定义如下：
	 * @code
	 * function on_close()
	 * {}
	 * @endcode
	 */
	onclose(Function func);
};
