
/*! @brief 网络套接口对象
 */
class Socket : Stream
{
	/*! @brief 地址集常量，指定 ipv4*/
	const Integer AF_INET = 2;

	/*! @brief 地址集常量，指定 ipv6*/
	const Integer AF_INET6 = 10;

	/*! @brief 协议族常量，指定 tcp*/
	const Integer SOCK_STREAM = 1;

	/*! @brief 协议族常量，指定 udp*/
	const Integer SOCK_DGRAM = 2;

	/*! @brief Socket 构造函数，创建一个新的 Socket 对象
	 * @param family 指定地址集，缺省为 AF_INET，ipv4
	 * @param type 指定协议族，缺省为 SOCK_STREAM，tcp
	 */
	Socket(Integer family = AF_INET, Integer type = SOCK_STREAM);

	/*! @brief 查询当前 Socket 对象的地址集 */
	readonly Integer family;

	/*! @brief 查询当前 Socket 对象的协议族 */
	readonly Integer type;

	/*! @brief 查询当前连接的对方地址 */
	readonly String remoteAddress;

	/*! @brief 查询当前连接的对方端口 */
	readonly Integer remotePort;

	/*! @brief 查询当前连接的本地地址 */
	readonly String localAddress;

	/*! @brief 查询当前连接的本地端口 */
	readonly Integer localPort;

	/*! @brief 建立一个 tcp 连接
	 * @param addr 指定对方地址
	 * @param port 指定对方端口
	 */
	connect(String addr, Integer port) async;

	/*! @brief 异步建立一个 tcp 连接
	 * @param addr 指定对方地址
	 * @param port 指定对方端口
	 */
	asyncConnect(String addr, Integer port);

	/*! @brief 注册 "connect" 事件，等同于 on("connect", func);
	 * @param func 事件处理函数
	 *
	 * "connect" 事件定义如下：
	 * @code
	 * function on_connect()
	 * {}
	 * @endcode
	 */
	onconnect(Function func);

	/*! @brief 将当前 Socket 绑定至本地所有地址的指定端口
	 * @param port 指定绑定的端口
	 * @param allowIPv4 指定是否接受 ipv4 连接，缺省为 true。本参数在 ipv6 时有效，并依赖于操作系统
	 */
	bind(Integer port, Boolean allowIPv4 = true);

	/*! @brief 将当前 Socket 绑定至指定地址的指定端口
	 * @param addr 指定绑定的地址
	 * @param port 指定绑定的端口
	 * @param allowIPv4 指定是否接受 ipv4 连接，缺省为 true。本参数在 ipv6 时有效，并依赖于操作系统
	 */
	bind(String addr, Integer port, Boolean allowIPv4 = true);

	/*! @brief 开始监听连接请求
	 * @param backlog 指定请求队列长度，超出的请求将被拒绝，缺省为 20
	 */
	listen(Integer backlog = 20);

	/*! @brief 等待并接受一个连接 */
	Socket accept() async;

	/*! @brief 异步等待并接受一个连接 */
	asyncAccept();

	/*! @brief 注册 "accept" 事件，等同于 on("accept", func);
	 * @param func 事件处理函数
	 *
	 * "accept" 事件定义如下：
	 * @code
	 * function on_accept(s)
	 * {}
	 * @endcode
	 */
	onaccept(Function func);

	/*! @brief 从连接读取指定大小的数据，此方法等效于 read 方法
	 * @param bytes 指定要读取的数据量，缺省为读取剩余全部数据
	 * @return 返回从连接读取的数据
	 */
	Buffer recv(Integer bytes = -1) async;

	Buffer recvFrom(Integer bytes = -1);

	/*! @brief 将给定的数据写入连接，此方法等效于 write 方法
	 * @param data 给定要写入的数据
	 */
	send(Buffer data) async;

	sendto(Buffer data, String host, Integer port);
};
