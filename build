#!/bin/bash

BUILD_JOBS=""
BUILD_TYPE=${!#}

usage()
{
	echo ""
	echo "Usage: `basename $0` [-j] [-h] <Release | Release32 | Debug | Debug32 | clean>"
	echo "  -j: enable make '-j' option. if set, will auto_detect core count and set make jobs to x2."
	echo "  -h: print this and exit."
	echo ""
	exit 0
}

if [ "$BUILD_TYPE" != 'Release' ] && [ $BUILD_TYPE != 'Release32' ] && [ $BUILD_TYPE != 'Debug' ] && [ $BUILD_TYPE != 'Debug32' ] && [ $BUILD_TYPE != 'clean' ]; then
	usage
fi

while getopts :jh OPT
do
    case $OPT in
        j)  BUILD_JOBS=1
            ;;
        h)  usage
            ;;
        \?) usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ "$BUILD_JOBS" = "1" ]; then
	#get cpu core count 
	OS=$(uname)
	CPU_CORE=1
	case ${OS} in
		Darwin)
			CPU_CORE=$(sysctl hw.ncpu | awk '{print $2}')
			;;
		Linux)
			CPU_CORE=$(cat /proc/cpuinfo | grep processor | wc -l)
			;;
		Windows)
			CPU_CORE=$(echo $NUMBER_OF_PROCESSORS)
			;;
	esac
	echo "host machine has ${CPU_CORE} core"

	if [ "$CPU_CORE" = "1" ]; then
		BUILD_JOBS=""
	else
		# set build jobs with cpu core count * 2
		BUILD_JOBS=`expr ${CPU_CORE} \* 2`
	fi
fi

cd vender
BUILD_JOBS=${BUILD_JOBS} sh build $BUILD_TYPE
cd ..

cd fibjs
BUILD_JOBS=${BUILD_JOBS} sh build $BUILD_TYPE
cd ..

if [ $1 = 'clean' ]; then
	if [ -e "bin" ]; then
		rm -rf "bin"
	fi
fi
