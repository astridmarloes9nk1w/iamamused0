
/*! \brief 控制台访问对象
*
* 全局对象。可用于提示信息，警告和错误记录。通过启动配置文件，可将日志定位
* 到不同的设备，以便于跟踪。日志支持格式化输出，例如：
*
* console.log("%d + %d = %d", 100, 200, 100 + 200); 
*/
class console
{
	/*! \brief 记录普通日志信息，与 info 等同
	*
	* 记录一般等级的日志信息。通常用于输出非错误性提示信息。非重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static log(string fmt, ...);
	/*! \brief 记录普通日志信息，与 log 等同
	*
	* 记录一般等级的日志信息。通常用于输出非错误性提示信息。非重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static info(string fmt, ...);
	/*! \brief 记录调试日志信息
	*
	* 记录用于调试的日志信息。通常用于输出非错误性调试信息。一般重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static debug(string fmt, ...);
	/*! \brief 记录警告日志信息
	*
	* 记录警告日志信息。通常用于输出非错误性调试信息。重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static warn(string fmt, ...);
	/*! \brief 记录错误日志信息
	*
	* 记录用于错误日志信息。通常用于输出非错误性调试信息。非常重要。系统的出错信息也会以此等级记录。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static error(string fmt, ...);
	/*! \brief 启动一个计时器
	*
	* \param label 标题，缺省为空字符串。
	*/
	static time(string label = "");
	/*! \brief 统计指定计时器的数值
	*
	* \param label 标题，缺省为空字符串。
	*/
	static timeEnd(string label = "");
	/*! \brief 输出当前调用堆栈
	*
	* 通过日志输出当前调用堆栈。
	* \param label 标题，缺省为空字符串。
	*/
	static trace(string label = "");
};

/*! \brief 操作系统信息查询，全局对象*/
class os
{
	/*! \brief 查询当前运行环境主机名*/
	static string hostname();
	/*! \brief 查询当前运行环境操作系统名称*/
	static string type();
	/*! \brief 查询当前运行环境操作系统版本*/
	static string release();
	/*! \brief 查询当前运行环境*/
	static string arch();
	/*! \brief 查询当前运行环境 cpu 个数和参数*/
	static array CPUInfo();
	/*! \brief 查询当前运行环境网络信息*/
	static array networkInfo();
};

class file
{
	const integer FSEEK_SET = 0;
	const integer FSEEK_CUR = 1;
	const integer FSEEK_END = 2;

	number data;
	number getData();

/*
	close();
	boolean closed();
	flush();
	readable();
	string readline(integer limit = -1);
	integer seek(integer offset, integer whence = SEEK_SET);
	boolean seekable();
	integer tell();
	integer truncate(integer size = -1);
	boolean writeable();

	data read(integer size = -1);
	data readall();
	write(data d);*/
};

/*! \brief 文件处理对象，全局对象*/
class fs
{
	const integer FSEEK_SET = 0;
	const integer FSEEK_CUR = 1;
	const integer FSEEK_END = 2;

	static file open(string fname, string IOMode = "r", string encoding = "utf-8");
	static file create(string fname, boolean Overwrite = true);
	static file tmpFile();
};

/*! \brief 全局对象，所有脚本均可以访问的基础对象*/
class global
{
	/*! \brief 出让当前协程占用的运行时间，切换到下一个排队的协程*/
	yield();
	/*! \brief 控制台访问对象*/
	readonly console console;
	/*! \brief 操作系统信息查询*/
	readonly os os;
	/*! \brief 文件处理对象*/
	readonly fs fs;
};

