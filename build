#!/bin/bash

usage()
{
	echo ""
	echo "Usage: `basename $0` <Release | Release32 | Debug | Debug32 | clean> [-j n|auto] [-v]"
	echo "  -j: enable make '-j' option."
	echo "      if 'auto' is gaven, will set jobs to auto detected core count, otherwise n is used."
	echo "  -v: verbose make"
	echo ""
	exit 0
}

BUILD_TYPE=$1; shift 1;

if [ "$BUILD_TYPE" = "" ]; then
	usage
fi

if [ $BUILD_TYPE != 'Release' ] && [ $BUILD_TYPE != 'Release32' ] && [ $BUILD_TYPE != 'Debug' ] && [ $BUILD_TYPE != 'Debug32' ] && [ $BUILD_TYPE != 'clean' ]; then
	usage
fi

while getopts j:v OPT
do
    case $OPT in
        j)  BUILD_JOBS=$OPTARG
            ;;
        v)  BUILD_VERBOSE='VERBOSE=V=1' 
            ;;
        \?) usage
            ;;
    esac
done


if [ "$BUILD_JOBS" = "auto" ]; then
	#get cpu core count 
	OS=$(uname)
	CPU_CORE=1
	case ${OS} in
		Darwin)
			CPU_CORE=$(sysctl hw.ncpu | awk '{print $2}')
			;;
		Linux)
			CPU_CORE=$(cat /proc/cpuinfo | grep processor | wc -l)
			;;
		Windows)
			CPU_CORE=$(echo $NUMBER_OF_PROCESSORS)
			;;
	esac
	echo "host machine has ${CPU_CORE} core"

	if [ "$CPU_CORE" = "1" ]; then
		BUILD_JOBS=""
	else
		# set build jobs with cpu core count
		BUILD_JOBS=${CPU_CORE}
	fi
fi

export BUILD_JOBS
export $BUILD_VERBOSE

cd vender
sh build $BUILD_TYPE
cd ..

cd fibjs
sh build $BUILD_TYPE
cd ..

if [ "$1" = "clean" ]; then
	if [ -e "bin" ]; then
		rm -rf "bin"
	fi
fi