
/*! @brief 二进制数据缓存对象，用于 io 读写的数据处理

 Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建：
 @code
 var buf = new Buffer();
 @endcode
 */
class Buffer : object
{
	/*! @brief 缓存对象构造函数
	 @param datas 初始化数据数组
	 */
	Buffer(Array datas);

	/*! @brief 缓存对象构造函数
	 @param data 初始化二进制数据
	 */
	Buffer(Buffer data);

	/*! @brief 缓存对象构造函数
	 @param size 初始化缓冲区大小
	 */
	Buffer(Integer size = 0);

	/*! @brief 缓存对象构造函数
	 @param str 初始化字符串，字符串将以 utf-8 格式写入，缺省则创建一个空对象
	 @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
	 */
	Buffer(String str, String codec = "utf8");

	/*! @brief 缓存对象可使用下标直接访问二进制数据*/
	Integer operator[];

	/*! @brief 获取缓存对象的尺寸 */
	readonly Integer length;

	/*! @brief 修改缓存对象尺寸
	 @param sz 指定新尺寸
	 */
	resize(Integer sz);

	/*! @brief 向缓存对象写入一组数据
	 @param datas 初始化数据数组
	 */
	write(Array datas);

	/*! @brief 向缓存对象写入一组二进制数据
	 @param data 初始化二进制数据
	 */
	write(Buffer data);

	/*! @brief 向缓存对象写入字符串，字符串将以 utf-8 格式写入
	 @param str 要写入的字符串
	 @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
	 */
	write(String str, String codec = "utf8");

	/*! @brief 返回一个新缓存对象，包含指定范围的数据，若范围超出缓存，则只返回有效部分数据
	 @param start 指定范围的起始，缺省从头开始
	 @param end 指定范围的结束，缺省到缓存结尾
	 @return 返回新的缓存对象
	 */
	Buffer slice(Integer start = 0, Integer end = -1);

	/*! @brief 使用 16 进制编码缓存对象内容
	 @return 返回编码字符串
	 */
	String hex();

	/*! @brief 使用 base64 编码缓存对象内容
	 @return 返回编码字符串
	 */
	String base64();

	/*! @brief 返回二进制数据的编码字符串
	 @param codec 指定编码格式，允许值为："hex", "base64", "utf8", 或者系统支持的字符集
	 @return 返回对象的字符串表示
	*/
	String toString(String codec);

	/*! @brief 返回二进制数据的 utf8 编码字符串
	 @return 返回对象的字符串表示
	*/
	String toString();
};

