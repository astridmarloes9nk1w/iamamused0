
/*! @brief 消息队列模块 */
class mq : module
{
	/*! @brief 创建一个消息处理器链处理对象，参见 Chain
	 * @param hdlrs 处理器数组
	 */
	static Chain chain(Array hdlrs);

	/*! @brief 创建一个消息处理器路由对象，参见 Routing
	 * @param map 初始化路由参数
	 */
	static Routing routing(Object map);

	/*! @brief 创建一个 javascript 消息处理器对象
	 * @param hdlr 处理函数，或 javascript 消息映射对象，处理器将自动映射子对象及函数
	 * @return 返回封装了处理函数的处理器
	 *
	 * 消息处理函数语法如下：
	 * @code
	 * function func(v){
	 * }
	 * @endcode
	 * 参数 v 为正在处理的消息，返回结果允许有三种:
	 * - Object javascript 对象，下一阶段将使用此对象进行消息映射
	 * - Function javascript 函数，将使用此函数进行下一阶段处理
	 * - Handler 普通处理器，将使用此处理器进行下一阶段处理
	 * 无返回或者其他的返回结果将结束消息处理。
	 *
	 * 使用消息映射对象处理器将根据对象属性嵌套逻辑处理消息，如下所示：
	 * @code
	 * hdlr = mq.jsHandler({
	 *     // fun1
	 *    fun1 : function(v){},
	 *    sub : {
	 *        // sub.fun2 或者 sub/fun2
	 *        fun2 : function(v){},
	 *        // sub.hdlr 或者 sub/hdlr
	 *        hdlr: myHandler
	 *    }
	 * });
	 * @endcode
	 * 示例中 fun1 和 fun2 为普通的 javascript 处理函数，sub 为子对象，myHandler 为其他处理器对象
	 */
	static Handler jsHandler(Value hdlr);

	/*! @brief 创建一个模块消息处理器对象
	 * @param id 模块名称，或者模块目录名，为目录是自动映射模块和函数
	 * @param method 模块内的函数名，省略则自动映射函数
	 * @return 返回封装了处理函数的处理器
	 *
	 * 模块处理器用于封装处理器对 javascript 模块的加载和访问。下面的示例封装指定模块的指定函数为一个消息处理器：
	 * @code
	 * hdlr = mq.moduleHandler('app/mod.js', 'fun1');
	 * @endcode
	 *
	 * 通过省略 func 参数，可以指定自动映射函数。下面的示例将可以根据消息的内容访问 mod.js 模块的不同函数，如：fun1
	 * @code
	 * hdlr = mq.moduleHandler('app/mod.js');
	 * @endcode
	 *
	 * 也可以通过指定路径，支持一组模块的自动映射。下面的示例将消息映射到不同模块的不同方法，如：mod.fun1
	 * @code
	 * hdlr = mq.moduleHandler('app/');
	 * @endcode
	 */
	static Handler moduleHandler(String id, String method = "");

	/*! @brief 创建一个空处理器对象，次处理对象不做任何处理直接返回
	 * @return 返回空处理函数
	 */
	static Handler nullHandler();

	/*! @brief 使用给定的处理器处理一个消息或对象
	 * @param hdlr 指定使用的处理器
	 * @param v 指定要处理的消息或对象
	 *
	 * 不同于处理器的 invoke 方法，此方法将循环调用每个处理器的返回处理器，直到处理器返回 null 为止。
	 */
	static invoke(Handler hdlr, object v) async;

	/*! @brief 使用给定的 javascript 处理器处理一个消息或对象
	 * @param hdlr 指定使用的处理器
	 * @param v 指定要处理的消息或对象
	 * @return 返回非 javascript 处理器，或者返回空
	 *
	 * js_invoke 用于执行 javascript 处理器。此方法将循环调用每个处理器对象，直到处理器返回非 javascript 处理器为止。
	 */
	static Handler js_invoke(Handler hdlr, object v) async;
};
