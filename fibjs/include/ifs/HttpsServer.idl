/*! @brief https 服务器对象

 https 服务器对象是将 SslServer 和 HttpHandler 组合封装的对象，方便快速搭建服务器，逻辑上相当于：
 @code
 var svr = new net.SslServer(crt, key, addr, port, new http.Handler(function(req){
    ...
 }));
 @endcode

 创建方法：
 @code
 var http = require("http");
 var svr = new http.HttpsServer(crt, key, 443, function(req){
     ...
 });
 @endcode
 */
interface HttpsServer: object
{
    /*! @brief HttpsServer 构造函数，在所有本机地址侦听
      @param certs 服务器证书列表，格式为
        @code
        [
            {
                crt: [X509Cert object],
                key: [PKey object]
            },
            {
                crt: [X509Cert object],
                key: [PKey object]
            }
        ]
        @endcode
      @param port 指定 http 服务器侦听端口
      @param hdlr http 内置消息处理器，处理函数，或 javascript 消息映射对象，详见 mq.jsHandler
     */
    HttpsServer(Array certs, Integer port, Value hdlr);

    /*! @brief HttpsServer 构造函数
      @param certs 服务器证书列表，格式为
        @code
        [
            {
                crt: [X509Cert object],
                key: [PKey object]
            },
            {
                crt: [X509Cert object],
                key: [PKey object]
            }
        ]
        @endcode
      @param addr 指定 http 服务器侦听地址，为 "" 则在本机所有地址侦听
      @param port 指定 http 服务器侦听端口
      @param hdlr http 内置消息处理器，处理函数，或 javascript 消息映射对象，详见 mq.jsHandler
     */
    HttpsServer(Array certs, String addr, Integer port, Value hdlr);

    /*! @brief HttpsServer 构造函数，在所有本机地址侦听
      @param crt X509Cert 证书，用于客户端验证服务器
      @param key PKey 私钥，用于与客户端会话
      @param port 指定 http 服务器侦听端口
      @param hdlr http 内置消息处理器，处理函数，或 javascript 消息映射对象，详见 mq.jsHandler
     */
    HttpsServer(X509Cert crt, PKey key, Integer port, Value hdlr);

    /*! @brief HttpsServer 构造函数
      @param crt X509Cert 证书，用于客户端验证服务器
      @param key PKey 私钥，用于与客户端会话
      @param addr 指定 http 服务器侦听地址，为 "" 则在本机所有地址侦听
      @param port 指定 http 服务器侦听端口
      @param hdlr http 内置消息处理器，处理函数，或 javascript 消息映射对象，详见 mq.jsHandler
     */
    HttpsServer(X509Cert crt, PKey key, String addr, Integer port, Value hdlr);

    /*! @brief 运行 http 服务器并开始接收和分发连接，此函数不会返回 */
    run() async;

    /*! @brief 异步运行 http 服务器并开始接收和分发连接，调用后立即返回，服务器在后台运行 */
    asyncRun();

    /*! @brief 关闭 socket中止正在运行的服务器 */
    stop() async;

    /*! @brief https 服务器当前侦听的 Socket 对象  */
    readonly Socket socket;

    /*! @brief https 服务器当前事件处理接口对象 */
    Handler handler;

    /*! @brief 查询和设置是否允许跨域请求，缺省为 false */
    Boolean crossDomain;

    /*! @brief 查询和设置是否允强制使用 gzip 压缩输出，缺省为 false */
    Boolean forceGZIP;

    /*! @brief 查询和设置最大请求头个数，缺省为 128 */
    Integer maxHeadersCount;

    /*! @brief 查询和设置最大上传尺寸，以 MB 为单位，缺省为 64 */
    Integer maxUploadSize;

    /*! @brief 设定证书验证模式，缺省为 VERIFY_REQUIRED */
    Integer verification;

    /*! @brief 客户端证书验证 ca */
    readonly X509Cert ca;

    /*! @brief 查询 http 协议转换处理器的工作状态

      返回的结果为一个 Stats 对象，结构如下：
      @code
      {
          total : 1000,    // 总计处理的请求
          pendding : 100,  // 当前正在处理的请求
          request : 10,    // 新建的请求
          response : 10,   // 发送的响应
          error : 100,     // 发生的错误（不计入 404）
          error_400 : 10,  // 发生的请求错误
          error_404 : 12,  // 文件未找到的数量
          error_500 : 2    // 内部处理错误
      }
      @endcode
     */
    readonly Stats httpStats;

    /*! @brief 查询当前服务器 tcp 运行状态

      返回的结果为一个 Stats 对象，结构如下：
      @code
      {
          total : 1000,      // 总计处理的连接
          connections : 100, // 当前正在处理的连接
          accept : 10,       // 上次查询后新建的连接
          close : 10         // 上次查询后关闭的连接
      }
      @endcode
     */
    readonly Stats tcpStats;
};
