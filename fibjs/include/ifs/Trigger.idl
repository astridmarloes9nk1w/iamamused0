
/*! @brief 事件触发对象，可用于建立观察者模式，支持事件触发的对象均继承于此

 Event 对象可独立创建，以用于组建自定义的事件系统：
 @code
 var e = new coroutine.Trigger();
 @endcode
 */
class Trigger : object
{
    /*! @brief 构造函数 */
    Trigger();

    /*! @brief 绑定一个事件处理函数到对象
      @param ev 指定事件的名称
      @param func 指定事件处理函数
     */
    on(String ev, Function func);

    /*! @brief 绑定一个事件处理函数到对象
      @param map 指定事件映射关系，对象属性名称将作为事件名称，属性的值将作为事件处理函数
     */
    on(Object map);

    /*! @brief 绑定一个一次性事件处理函数到对象，一次性处理函数只会触发一次
      @param ev 指定事件的名称
      @param func 指定事件处理函数
     */
    once(String ev, Function func);

    /*! @brief 绑定一个一次性事件处理函数到对象，一次性处理函数只会触发一次
      @param map 指定事件映射关系，对象属性名称将作为事件名称，属性的值将作为事件处理函数
     */
    once(Object map);

    /*! @brief 从对象处理队列中取消指定函数
      @param ev 指定事件的名称
      @param func 指定事件处理函数
     */
    off(String ev, Function func);

    /*! @brief 取消对象处理队列中的全部函数
      @param ev 指定事件的名称
     */
    off(String ev);

    /*! @brief 从对象处理队列中取消指定函数
      @param map 指定事件映射关系，对象属性名称作为事件名称，属性的值作为事件处理函数
     */
    off(Object map);

    /*! @brief 主动触发一个事件
      @param ev 事件名称
      @param ... 事件参数，将会传递给事件处理函数
     */
    trigger(String ev, ...);
};

