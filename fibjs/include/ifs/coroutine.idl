
/*! @brief 并发控制模块
 * 
 * 饮用方法：var coroutine = require('coroutine');
 */
class coroutine : module
{
	/*! @brief 锁对象，参见 Lock */
	static Lock new Lock();

	/*! @brief 信号量对象，参见 Semaphore */
	static Semaphore new Semaphore();

	/*! @brief 条件变量对象，参见 Condition */
	static Condition new Condition();

	/*!	@brief 启动一个纤程并返回纤程对象
	 * @param func 制定纤程执行的函数
	 * @param ... 可变参数序列，此序列会在纤程内传递给函数
	 * @return 返回纤程对象
	 */
	static Fiber start(Function func, ...);

	/*! @brief 返回当前纤程
	 * @return 当前纤程对象
	 */
	static Fiber current();

	/*! @brief 暂停当前纤程指定的时间
	 * @param ms 指定要暂停的时间，以毫秒为单位，缺省为 0，即有空闲立即回恢复运行
	 */
	static sleep(Integer ms = 0);
};
