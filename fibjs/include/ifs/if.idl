/*! \mainpage My Personal Index Page
 *
 * \section intro_sec Introduction
 *
 * This is the introduction.
 *
 * \section install_sec Installation
 *
 * \subsection step1 Step 1: Opening the box
 *
 * etc...
 */


/*! \brief 基础对象，所有对象均继承于此*/
class object
{
	/*! \brief 强制回收对象，调用此方法后，对象资源将立即释放*/
	dispose();
	String toString();
};

/*! \brief 二进制数据缓存对象，用于 io 读写的数据处理
 *
 * Buffer 对象为全局基础类，在任何时候都可以直接以 new Buffer(...) 创建。
*/
class Buffer : object
{
	/*! \brief 缓存对象构造函数
	* \param str 初始化字符串，缺省则创建一个空对象
	* \param encoding 指定字符串的编码，允许的编码为：utf-8, utf8, ascii, ucs2, binary。缺省为 utf-8
	*/
	Buffer(String str = "", String encoding = "utf-8");
	Integer operator[];
};

/*! \brief 控制台访问对象
*
* 全局对象。可用于提示信息，警告和错误记录。通过启动配置文件，可将日志定位
* 到不同的设备，以便于跟踪。日志支持格式化输出，例如：
* \code
* console.log("%d + %d = %d", 100, 200, 100 + 200); 
* \endcode
*/
class console : object
{
	/*! \brief 记录普通日志信息，与 info 等同
	*
	* 记录一般等级的日志信息。通常用于输出非错误性提示信息。非重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static log(String fmt, ...);
	/*! \brief 记录普通日志信息，与 log 等同
	*
	* 记录一般等级的日志信息。通常用于输出非错误性提示信息。非重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static info(String fmt, ...);
	/*! \brief 记录调试日志信息
	*
	* 记录用于调试的日志信息。通常用于输出非错误性调试信息。一般重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static debug(String fmt, ...);
	/*! \brief 记录警告日志信息
	*
	* 记录警告日志信息。通常用于输出非错误性调试信息。重要。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static warn(String fmt, ...);
	/*! \brief 记录错误日志信息
	*
	* 记录用于错误日志信息。通常用于输出非错误性调试信息。非常重要。系统的出错信息也会以此等级记录。
	* \param fmt 格式化字符串
	* \param ... 可选参数列表
	*/
	static error(String fmt, ...);
	/*! \brief 启动一个计时器
	*
	* \param label 标题，缺省为空字符串。
	*/
	static time(String label = "");
	/*! \brief 统计指定计时器的数值
	*
	* \param label 标题，缺省为空字符串。
	*/
	static timeEnd(String label = "");
	/*! \brief 输出当前调用堆栈
	*
	* 通过日志输出当前调用堆栈。
	* \param label 标题，缺省为空字符串。
	*/
	static trace(String label = "");
};

/*! \brief 操作系统信息查询，全局对象*/
class os : object
{
	/*! \brief 查询当前运行环境主机名*/
	static String hostname();
	/*! \brief 查询当前运行环境操作系统名称*/
	static String type();
	/*! \brief 查询当前运行环境操作系统版本*/
	static String release();
	/*! \brief 查询当前运行环境*/
	static String arch();
	/*! \brief 查询当前运行环境 cpu 个数和参数*/
	static Array CPUInfo();
	/*! \brief 查询当前运行环境网络信息*/
	static Array networkInfo();
};


class stream : object
{
	const Integer FSEEK_SET = 0;
	const Integer FSEEK_CUR = 1;
	const Integer FSEEK_END = 2;
/*
	Boolean readable;
	Boolean writable;
	setEncoding(String encoding = "utf-8");
	String read(Integer size = 0);
	String readln();
	String readutil(String eos);
	write(String str);*/
};

class file : stream
{
	Number data;
	Number getData();

/*
	close();
	Boolean closed();
	flush();
	readable();
	String readline(Integer limit = -1);
	Integer seek(Integer offset, Integer whence = SEEK_SET);
	Boolean seekable();
	Integer tell();
	Integer truncate(Integer size = -1);
	Boolean writeable();

	data read(Integer size = -1);
	data readall();
	write(data d);*/
};

/*! \brief 文件处理对象，全局对象*/
class fs : object
{
	const Integer FSEEK_SET = 0;
	const Integer FSEEK_CUR = 1;
	const Integer FSEEK_END = 2;

	static file open(String fname, String IOMode = "r", String encoding = "utf-8");
	static file create(String fname, Boolean Overwrite = true);
	static file tmpFile();
};

/*! \brief 全局对象，所有脚本均可以访问的基础对象*/
class global
{
	/*! \brief 出让当前协程占用的运行时间，切换到下一个排队的协程*/
	yield();
	/*! \brief 控制台访问对象*/
	readonly console console;
	/*! \brief 操作系统信息查询*/
	readonly os os;
	/*! \brief 文件处理对象*/
	readonly fs fs;
};

