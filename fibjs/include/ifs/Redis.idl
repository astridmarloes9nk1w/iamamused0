
/*! @brief Redis 数据库客户端对象

 用以创建和管理字典对象，创建方法：
 @code
 var db = require("db");
 var test = new db.openRedis("redis-server");
 @endcode
 */
class Redis : object
{
    /*! @brief redis 基础命令方法
     @param cmd 指定发送的命令
     @param ... 指定发送的参数
     @return 返回服务器返回的结果 */
    Value command(String cmd, ...);

    /*! @brief 将字符串值 value 关联到 key，如果 key 已经持有其他值， SET 就覆写旧值，无视类型
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    set(String key, String value, Long ttl = 0);

    /*! @brief 将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key 已经存在，则 SETNX 不做任何动作。
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    setNX(String key, String value, Long ttl = 0);

    /*! @brief 将 key 的值设为 value，只在键已经存在时，才对键进行设置操作。
     @param key 指定要关联的 key
     @param value 指定要关联的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间 */
    setXX(String key, String value, Long ttl = 0);

    /*! @brief 同时设置一个或多个 key-value 对。如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值
     @param kvs 指定要设置的 key/value 数组*/
    mset(Array keys);

    /*! @brief 同时设置一个或多个 key-value 对。如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值
     @param ... 指定要设置的 key/value 列表*/
    mset(...);

    /*! @brief 如果 key 已经存在并且是一个字符串，append 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在，append 就简单地将给定 key 设为 value
     @param key 指定要追加的 key
     @param value 指定要追加的数据
     @return 追加 value 之后， key 中字符串的长度 */
    Integer append(String key, String value);

    /*! @brief 返回 key 所储存的字符串值的长度。当 key 储存的不是字符串值时，返回一个错误
     @param key 指定要计算的 key
     @return 字符串值的长度。当 key 不存在时，返回 0 */
    Integer strlen(String key);

    /*! @brief 计算给定字符串中，被设置为 1 的比特位的数量
     @param key 指定要计算的 key
     @param start 指定要计算的起始字节，可以使用负数值，-1 表示最后一个字节，而 -2 表示倒数第二个字节，以此类推
     @param end 指定要计算的结束字节，可以使用负数值，-1 表示最后一个字节，而 -2 表示倒数第二个字节，以此类推
     @return 被设置为 1 的位的数量 */
    Integer bitcount(String key, Integer start = 0, Integer end = -1);

    /*! @brief 返回 key 所关联的字符串值，如果 key 不存在那么返回特殊值 Null
     @param key 指定要关联的 key
     @return 当 key 不存在时，返回 Null ，否则，返回 key 的值 */
    String get(String key);

    /*! @brief 返回所有(一个或多个)给定 key 的值。如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。
     @param keys 指定要查询的 key 数组
     @return 一个包含所有给定 key 的值的列表 */
    List mget(Array keys);

    /*! @brief 返回所有(一个或多个)给定 key 的值。如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。
     @param ... 指定要查询的 key 列表
     @return 一个包含所有给定 key 的值的列表 */
    List mget(...);

    /*! @brief 返回 key 所关联的字符串值，如果 key 不存在那么返回特殊值 Null
     @param key 指定要关联的 key
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean exists(String key);

    /*! @brief 返回 key 所储存的值的类型
     @param key 指定要查询的 key
     @return 返回 key 所储存的值的类型，可能的值为 none(key不存在) string(字符串) list(列表) set(集合) zset(有序集) hash(哈希表) */
    String type(String key);

    /*! @brief 查找所有符合给定模式 pattern 的 key
     @param pattern 指定查询模式
     @return 符合给定模式的 key 列表 */
    List keys(String pattern);

    /*! @brief 检查给定 key 是否存在
     @param keys 指定要删除的 key 数组
     @return 被删除 key 的数量 */
    Integer del(Array keys);

    /*! @brief 删除给定的一个或多个 key，不存在的 key 会被忽略
     @param ... 指定要删除的 key 列表
     @return 被删除 key 的数量 */
    Integer del(...);

    /*! @brief 为给定 key 设置生存时间，当 key 过期时，它会被自动删除
     @param key 指定要设定的 key
     @param ttl 以毫秒为单位为 key 设置生存时间
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean expire(String key, Long ttl);

    /*! @brief 返回给定 key 的剩余生存时间
     @param key 指定要查询的 key
     @return 以毫秒为单位，返回 key 的剩余生存时间，当 key 不存在时，返回 -2，当 key 存在但没有设置剩余生存时间时，返回 -1 */
    Long ttl(String key);

    /*! @brief 移除给定 key 的生存时间，将这个 key 从『易失的』(带生存时间 key )转换成『持久的』(一个不带生存时间、永不过期的 key)
     @param key 指定要设定的 key
     @return 若 key 存在，返回 True，否则返回 False */
    Boolean persist(String key);

    /*! @brief 将 key 改名为 newkey，当 key 和 newkey 相同，或者 key 不存在时，返回一个错误
     @param key 指定要改名的 key
     @param newkey 指定要改名的目的 key */
    rename(String key, String newkey);

    /*! @brief 当且仅当 newkey 不存在时，将 key 改名为 newkey，当 key 不存在时，返回一个错误
     @param key 指定要改名的 key
     @param newkey 指定要改名的目的 key
     @return 修改成功时，返回 True，如果 newkey 已经存在，返回 False */
    Boolean renameNX(String key, String newkey);

    /*! @brief 序列化给定 key ，并返回被序列化的值，使用 restore 命令可以将这个值反序列化为 Redis 键
     @param key 指定要序列化的 key
     @return 返回序列化之后的值，如果 key 不存在，那么返回 null */
    Buffer dump(String key);

    /*! @brief 反序列化给定的序列化值，并将它和给定的 key 关联
     @param key 指定要反序列化的 key
     @param data 指定要反序列化的数据
     @param ttl 以毫秒为单位为 key 设置生存时间；如果 ttl 为 0 ，那么不设置生存时间*/
    restore(String key, Buffer data, Long ttl = 0);

    /*! @brief 关闭当前数据库连接或事务 */
    close();
};
