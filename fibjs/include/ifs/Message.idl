
/*! @brief 基础消息对象  */
class Message: Trigger
{
	/*! @brief 消息的基本内容 */
	String value;

	/*! @brief 消息的基本参数 */
	List params;

	/*! @brief 消息的返回结果 */
	Variant result;

	/*! @brief 包含消息数据部分的流对象 */
	SeekableStream body;

	/*! @brief 消息数据部分的长度 */
	readonly Long length;

	/*! @brief 清除消息的内容 */
	clear();

	/*! @brief 发送格式化消息到给定的流对象
	 * @param stm 指定接收格式化消息的流对象
	 */
	sendTo(Stream stm) async;

	/*! @brief 异步发送格式化消息到给定的流对象，操作完成将触发 sendto 事件
	 * @param stm 指定接收格式化消息的流对象
	 */
	asyncSendTo(Stream stm);

	/*! @brief 注册 "sendto" 事件，等同于 on("sendto", func);
	 * @param func 事件处理函数
	 *
	 * "sendto" 事件定义如下：
	 * @code
	 * function on_sendto()
	 * {}
	 * @endcode
	 */
	onsendto(Function func);

	/*! @brief 从给定的缓存流对象中读取格式化消息，并解析填充对象
	 * @param stm 指定读取格式化消息的流对象
	 */
	readFrom(BufferedStream stm) async;

	/*! @brief 异步从给定的缓存流对象中读取格式化消息，并解析填充对象，操作完成将触发 readfrom 事件
	 * @param stm 指定读取格式化消息的流对象
	 */
	asyncReadFrom(BufferedStream stm);

	/*! @brief 注册 "readfrom" 事件，等同于 on("readfrom", func);
	 * @param func 事件处理函数
	 *
	 * "readfrom" 事件定义如下：
	 * @code
	 * function on_readfrom()
	 * {}
	 * @endcode
	 */
	onreadfrom(Function func);

	/*! @brief 查询消息读取时的流对象 */
	readonly Stream stream;
};
